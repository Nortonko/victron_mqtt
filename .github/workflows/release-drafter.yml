name: Release Drafter

on:
  push:
    branches:
      - main
  # pull_request event is required only for autolabeler
  pull_request:
    # Only following types are handled by the action, but one can default to all as well
    types: [opened, reopened, synchronize]
  release:
    types:
      - created

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      # Drafts your next Release notes as Pull Requests are merged into "main"
      - uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_release_notes:
    needs: update_release_draft
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get previous tag
        id: get_previous_tag
        run: |
          CURRENT_TAG="${{ github.event.release.tag_name }}"
          echo "Current release tag: $CURRENT_TAG"
          
          # Get all tags sorted by commit date (newest first), excluding the current tag
          PREVIOUS_TAG=$(git tag --sort=-creatordate | grep -v "^$CURRENT_TAG$" | head -1)
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using initial commit"
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Previous tag: $PREVIOUS_TAG"
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Get commit messages
        id: get_commits
        run: |
          CURRENT_TAG="${{ github.event.release.tag_name }}"
          echo "Getting commits between $PREVIOUS_TAG and $CURRENT_TAG"
          
          # Get commit messages between previous tag and current tag
          COMMITS=$(git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"%s" | tr '\n' '; ')
          echo "Found commits: $COMMITS"
          echo "commits=$COMMITS" >> $GITHUB_ENV

      - name: Update release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release edit ${{ github.event.release.tag_name }} --notes "$commits"
